'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap, AlertCircle, ExternalLink, CheckCircle2, Loader2 } from 'lucide-react';
import { LiquidityPosition, TransactionStatus } from '@/types';
import { useWallet } from '@aptos-labs/wallet-adapter-react';
import { createBatchLiquidityPayload, createSimulationPayload } from '@/lib/aptos-config';

interface BatchSummaryProps {
  positions: LiquidityPosition[];
}

export function BatchSummary({ positions }: BatchSummaryProps) {
  const [txStatus, setTxStatus] = useState<TransactionStatus>({ status: 'idle' });
  const { connected, signAndSubmitTransaction, network } = useWallet();

  const hasValidPositions = positions.length > 0 && positions.every(
    p => p.token0Amount && p.token1Amount && p.priceRange.min && p.priceRange.max
  );

  const estimatedGasCost = positions.length * 150; // Mock Aptos gas units estimation

  const handleExecuteTransaction = async () => {
    if (!connected || !hasValidPositions) return;

    setTxStatus({ status: 'pending' });

    try {
      // First simulate the transaction to validate parameters
      const simulationData = positions.map(p => ({
        poolId: p.poolId,
        token0Amount: p.token0Amount,
        token1Amount: p.token1Amount,
        minPrice: p.priceRange.min,
        maxPrice: p.priceRange.max
      }));

      // Create the actual transaction payload
      const payload = createBatchLiquidityPayload(simulationData);

      // Use the Aptos wallet to sign and submit the transaction
      const response = await signAndSubmitTransaction(payload);
      
      setTxStatus({ 
        status: 'success', 
        hash: response.hash
      });
    } catch (error) {
      console.error('Transaction error:', error);
      setTxStatus({ 
        status: 'error', 
        error: error instanceof Error ? error.message : 'Transaction failed. Please try again.'
      });
    }
  };

  const formatFee = (fee: number) => {
    return (fee / 10000).toString() + '%';
  };

  const getButtonText = () => {
    if (!connected) return 'Connect Wallet';
    if (!hasValidPositions) return 'Configure Positions';
    if (txStatus.status === 'pending') return 'Processing...';
    return 'Generate & Submit Transaction';
  };

  const getButtonDisabled = () => {
    return !connected || !hasValidPositions || txStatus.status === 'pending';
  };

  return (
    <motion.div 
      className="sticky top-24 space-y-4"
      initial={{ opacity: 0, x: 20 }}
      animate={{ opacity: 1, x: 0 }}
      transition={{ duration: 0.6, delay: 0.3 }}
    >
      {/* Main Summary Panel */}
      <div className="glass glass-hover p-6">
        <div className="flex items-center space-x-3 mb-6">
          <div className="p-2 bg-blue-500/20 rounded-lg">
            <Zap className="w-5 h-5 text-blue-400" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-white">Batch Summary</h3>
            <p className="text-sm text-gray-400">{positions.length} position{positions.length !== 1 ? 's' : ''}</p>
          </div>
        </div>

        {/* Position List */}
        <div className="space-y-3 mb-6">
          {positions.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <AlertCircle className="w-8 h-8 mx-auto mb-2 opacity-50" />
              <p className="text-sm">No positions added yet</p>
            </div>
          ) : (
            positions.map((position, index) => (
              <motion.div
                key={`summary-${index}`}
                className="bg-gray-800/30 rounded-lg p-4 border border-gray-700/50"
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.2, delay: index * 0.1 }}
              >
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-2">
                    <div className="flex -space-x-1">
                      <div className="w-6 h-6 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-xs font-bold text-white">
                        {position.pool.token0.symbol.charAt(0)}
                      </div>
                      <div className="w-6 h-6 rounded-full bg-gradient-to-r from-green-500 to-blue-500 flex items-center justify-center text-xs font-bold text-white">
                        {position.pool.token1.symbol.charAt(0)}
                      </div>
                    </div>
                    <span className="text-sm font-medium text-white">
                      {position.pool.token0.symbol}/{position.pool.token1.symbol}
                    </span>
                  </div>
                  <span className="text-xs bg-gray-600/50 px-2 py-1 rounded text-gray-300">
                    {formatFee(position.pool.fee)}
                  </span>
                </div>
                
                <div className="grid grid-cols-2 gap-2 text-xs text-gray-400">
                  <div>
                    <span className="text-gray-500">{position.pool.token0.symbol}:</span>
                    <span className="text-white ml-1">
                      {position.token0Amount || '0'} {position.pool.token0.symbol}
                    </span>
                  </div>
                  <div>
                    <span className="text-gray-500">{position.pool.token1.symbol}:</span>
                    <span className="text-white ml-1">
                      {position.token1Amount || '0'} {position.pool.token1.symbol}
                    </span>
                  </div>
                </div>
                
                {position.priceRange.min && position.priceRange.max && (
                  <div className="mt-2 text-xs text-blue-400">
                    Range: ${position.priceRange.min.toLocaleString()} - ${position.priceRange.max.toLocaleString()}
                  </div>
                )}
              </motion.div>
            ))
          )}
        </div>

        {/* Transaction Details */}
        {positions.length > 0 && (
          <div className="space-y-3 mb-6 p-4 bg-gray-800/20 rounded-lg border border-gray-700/30">
            <div className="flex justify-between text-sm">
              <span className="text-gray-400">Estimated Gas Units:</span>
              <span className="text-white font-medium">~{estimatedGasCost} units</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-400">Transaction Type:</span>
              <span className="text-green-400 font-medium">Batched Injection</span>
            </div>
            <div className="flex justify-between text-sm">
              <span className="text-gray-400">MEV Protection:</span>
              <span className="text-green-400 font-medium flex items-center">
                <CheckCircle2 className="w-4 h-4 mr-1" />
                Enabled
              </span>
            </div>
          </div>
        )}

        {/* Execute Button */}
        <button
          className={`w-full py-4 px-6 rounded-lg font-medium flex items-center justify-center space-x-2 transition-all duration-300 ease-in-out ${
            getButtonDisabled()
              ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
              : 'bg-gradient-to-r from-teal-500 to-cyan-600 hover:from-teal-600 hover:to-cyan-700 text-white shadow-lg hover:shadow-xl hover:shadow-teal-500/20 hover:scale-[1.02] active:scale-[0.98]'
          }`}
          onClick={handleExecuteTransaction}
          disabled={getButtonDisabled()}
        >
          {txStatus.status === 'pending' && (
            <Loader2 className="w-5 h-5 animate-spin" />
          )}
          <span>{getButtonText()}</span>
        </button>

        {/* Transaction Status */}
        {txStatus.status !== 'idle' && (
          <motion.div
            className="mt-4"
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            {txStatus.status === 'pending' && (
              <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-3 text-yellow-400 text-sm">
                <div className="flex items-center space-x-2">
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span>Transaction pending...</span>
                </div>
              </div>
            )}
            
            {txStatus.status === 'success' && txStatus.hash && (
              <div className="bg-green-500/10 border border-green-500/30 rounded-lg p-3 text-green-400 text-sm">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <CheckCircle2 className="w-4 h-4" />
                    <span>Transaction successful!</span>
                  </div>
                  <a
                    href={`https://explorer.aptoslabs.com/txn/${txStatus.hash}${network?.name !== 'mainnet' ? `?network=${network?.name}` : ''}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center space-x-1 text-green-300 hover:text-green-200 transition-colors"
                  >
                    <span>View</span>
                    <ExternalLink className="w-3 h-3" />
                  </a>
                </div>
              </div>
            )}
            
            {txStatus.status === 'error' && (
              <div className="bg-red-500/10 border border-red-500/30 rounded-lg p-3 text-red-400 text-sm">
                <div className="flex items-center space-x-2">
                  <AlertCircle className="w-4 h-4" />
                  <span>{txStatus.error}</span>
                </div>
              </div>
            )}
          </motion.div>
        )}
      </div>

      {/* Information Panel */}
      <motion.div 
        className="glass p-4"
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.5 }}
      >
        <h4 className="text-sm font-medium text-gray-300 mb-2 flex items-center">
          <AlertCircle className="w-4 h-4 mr-2 text-blue-400" />
          MEV Protection
        </h4>
        <p className="text-xs text-gray-400 leading-relaxed">
          Your transaction will be protected from front-running and MEV bot arbitrage through our specialized smart contract implementation.
        </p>
      </motion.div>
    </motion.div>
  );
}